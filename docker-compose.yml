version: '3.8'

services:
  backend:
    build: ./backend
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - VECTOR_DB_TYPE=${VECTOR_DB_TYPE:-postgres}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=vectordb
      - POSTGRES_PASSWORD=vectordb123
      - POSTGRES_DB=knitting_patterns
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - huggingface-cache:/root/.cache/huggingface
      - ./data:/app/data  # Mount data directory (PDFs and embeddings)
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 16G

  frontend:
    build: ./frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - app-network

  postgres:
    profiles: ["postgres"]
    image: pgvector/pgvector:pg16
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=vectordb
      - POSTGRES_PASSWORD=vectordb123
      - POSTGRES_DB=knitting_patterns
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vectordb -d knitting_patterns"]
      interval: 5s
      timeout: 5s
      retries: 5

  qdrant:
    profiles: ["qdrant"]
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6333/healthz || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    profiles: ["redis"]
    image: redis/redis-stack-server:latest
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  huggingface-cache:
  postgres-data:
  qdrant-data:
  redis-data: